name: CI
env:
    TZ: Asia/Shanghai
    CXX: ccache clang++ -Qunused-arguments
on:
  push:
    tags:
      - '*'
    branches:
      - main
    paths-ignore:
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
jobs:
    build:
        name: make result.zip
        runs-on: ubuntu-latest
        steps:
        - name: init custom env
          run: |
              BUILD_NAME="${GITHUB_REPOSITORY#*/}"
              if [[ ${GITHUB_REF} == refs/tags* ]]
              then
                  echo CREATE_RELEASE="true" >> .custom_env
                  BUILD_VERSION=${GITHUB_REF#refs/tags/}
                  RELEASE_BODY='### ${{ github.event.head_commit.message }}'
              elif [[ ${GITHUB_REF} == refs/pull* ]]
              then
                  num=${GITHUB_REF#refs/pull/}
                  num=${num%/merge}
                  BUILD_VERSION=pr-${num}-"$(date +'%Y%m%d%H%M%S')"
              else
                  echo CREATE_RELEASE="true" >> .custom_env
                  echo PRE_RELEASE="true" >> .custom_env
                  BUILD_VERSION="$(date +'%Y%m%d%H%M%S')"
                  RELEASE_BODY='${{ toJson(github.event.commits) }}' |jq -r 'map("### "+.message)|join("\n\n------\n")'
              fi
              BUILD_NAME_WITH_VERSION="$BUILD_NAME-$BUILD_VERSION"
              echo BUILD_NAME="$BUILD_NAME" >> .custom_env
              echo BUILD_VERSION="$BUILD_VERSION" >> .custom_env
              echo BUILD_NAME_WITH_VERSION="$BUILD_NAME_WITH_VERSION" >> .custom_env
              if test -n "$RELEASE_BODY"
              then
                  echo 'RELEASE_BODY<<EOF' >> .custom_env
                  echo "$RELEASE_BODY" >> .custom_env
                  echo 'EOF' >> .custom_env
              fi
              cat .custom_env
              cat .custom_env >> $GITHUB_ENV
        - name: upload .custom_env
          uses: actions/upload-artifact@master
          with:
              name: custom_env
              path: ./.custom_env
        - name: clean custom env
          run: rm .custom_env
        - uses: actions/checkout@v2
        - name: build
          run: |
              ./build.sh
              cp $GITHUB_ENV build/output/
              cd build/output
              echo '${{ toJson(github) }}' > github
              echo '${{ env.RELEASE_BODY }}' > body
              zip -r ../result.zip * .[^.]*
              cd ../../
        - name: upload artifact result.zip
          uses: actions/upload-artifact@master
          with:
              name: build
              path: build/result.zip
        - name: upload artifact output folder
          uses: actions/upload-artifact@master
          with:
              name: second
              path: build/output
    release:
        needs: [build]
        name: make release
        runs-on: ubuntu-latest
        steps:
        - name: test env
          run: |
              echo $BUILD_NAME_WITH_VERSION
        - name: download custom env
          uses: actions/download-artifact@v2
          with:
              name: custom_env
        - name: apply custom env
          run: |
              cat .custom_env >> $GITHUB_ENV
              rm .custom_env
        - name: download build
          uses: actions/download-artifact@v2
          with:
              name: build
        - name: download second
          uses: actions/download-artifact@v2
          with:
              name: second
              path: second
        - run: find . > fileList.txt
        - name: create release
          if: ${{ env.CREATE_RELEASE == 'true' }}
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ env.BUILD_VERSION }}
            release_name: ${{ env.BUILD_VERSION }}
            body: ${{ env.RELEASE_BODY }}
            draft: true
            prerelease: ${{ env.PRE_RELEASE == 'true' }}
        - name: Upload Release Asset result.zip
          if: ${{ env.CREATE_RELEASE == 'true' }}
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./result.zip
            asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}.zip
            asset_content_type: application/zip
        - name: Upload Release Asset fileList.txt
          if: ${{ env.CREATE_RELEASE == 'true' }}
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./fileList.txt
            asset_name: fileList.txt
            asset_content_type: text/plain
        - name: public release
          if: ${{ env.CREATE_RELEASE == 'true' }}
          uses: eregon/publish-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            release_id: ${{ steps.create_release.outputs.id }}

