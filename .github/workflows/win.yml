name: CI
env:
  TZ: Asia/Shanghai
  CXX: ccache clang++ -Qunused-arguments
on:
  push:
    tags:
      - "*"
    branches:
      - "*"
    paths-ignore:
      - ".github/workflows/*"
      - "!.github/workflows/main.yml"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - ".github/workflows/*"
      - "!.github/workflows/main.yml"
  workflow_dispatch:
    inputs:
      force:
        description: 'force?'     
        required: false
        default: 'false'
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
jobs:
  build:
    name: make result.zip
    runs-on: mvw
    env:
      FORCE: false
    steps:
      - name: prepare inputs
        if: github.event.inputs.force != ''
        run: echo "FORCE=${{ github.event.inputs.force }}" >> $env:GITHUB_ENV
        shell: pwsh
      - uses: actions/checkout@v4
      - name: init custom env
        shell: pwsh
        run: |
          $BUILD_NAME = $env:GITHUB_REPOSITORY.Split('/')[-1]
          
          if ($env:GITHUB_REF -match "^refs/tags/") {
              $CREATE_RELEASE = "true"
              $BUILD_VERSION = $env:GITHUB_REF -replace "^refs/tags/"
              $RELEASE_BODY = & "./latest-changelog.sh" $BUILD_VERSION
              if ([string]::IsNullOrEmpty($RELEASE_BODY)) {
                  $RELEASE_BODY = "### ${{ github.event.head_commit.message }}"
              }
              $TG_CHANGELOG = $RELEASE_BODY
          }
          elseif ($env:GITHUB_REF -match "^refs/pull/") {
              $CREATE_RELEASE = "false"
              $num = $env:GITHUB_REF -replace "^refs/pull/" -replace "/merge$"
              $BUILD_VERSION = "pr-${num}-$(Get-Date -Format 'yyyyMMddHHmmss')"
          }
          elseif ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
              $CREATE_RELEASE = "true"
              "PRE_RELEASE=true" | Out-File -Append .custom_env
              $BUILD_VERSION = Get-Date -Format 'yyyyMMddHHmmss'
              $RELEASE_BODY = "workflow_dispatch"
              $TG_CHANGELOG = $RELEASE_BODY
              $VERSION_PREFIX = 'debug-'
          }
          elseif ("${{ github.event.commits }}" -eq "") {
              $CREATE_RELEASE = "false"
              $BUILD_VERSION = Get-Date -Format 'yyyyMMddHHmmss'
          }
          elseif ($env:GITHUB_REF -eq "refs/heads/dev") {
              $CREATE_RELEASE = "true"
              "PRE_RELEASE=true" | Out-File -Append .custom_env
              $BUILD_VERSION = Get-Date -Format 'yyyyMMddHHmmss'
              $RELEASE_BODY = '${{ toJson(github.event.commits) }}' | ConvertFrom-Json | ForEach-Object { "### " + $_.message } | Join-String -Separator "`n`n------`n"
              $TG_CHANGELOG = $RELEASE_BODY -replace "### (.*)", '$1' | ForEach-Object -Begin {$i=1} -Process { "$i. $_"; $i++ }
              $VERSION_PREFIX = 'debug-'
          }
          else {
              $CREATE_RELEASE = "false"
              $BUILD_VERSION = Get-Date -Format 'yyyyMMddHHmmss'
          }
          
          $BUILD_NAME_WITH_VERSION = "${BUILD_NAME}-${BUILD_VERSION}"
          
          "BUILD_NAME=${BUILD_NAME}" | Out-File -Append .custom_env
          "BUILD_VERSION=${BUILD_VERSION}" | Out-File -Append .custom_env
          "BUILD_NAME_WITH_VERSION=${BUILD_NAME_WITH_VERSION}" | Out-File -Append .custom_env
          "CREATE_RELEASE=${CREATE_RELEASE}" | Out-File -Append .custom_env
          
          if ($RELEASE_BODY) {
              "RELEASE_BODY<<EOF" | Out-File -Append .custom_env
              $RELEASE_BODY | Out-File -Append .custom_env
              "EOF" | Out-File -Append .custom_env
              
              "UPDATE_BODY<<EOF" | Out-File -Append .custom_env
              Get-Content template-update.md | ForEach-Object {
                  $_ -replace '\$\{.*?\}', ($ExecutionContext.InvokeCommand.ExpandString($_))
              } | Out-File -Append .custom_env
              "EOF" | Out-File -Append .custom_env
          }
          
          if ($CREATE_RELEASE -eq "true" -and "${{ secrets.TELEGRAM_TO }}" -and "${{ secrets.TELEGRAM_TOKEN }}") {
              "SEND_TELEGRAM=true" | Out-File -Append .custom_env
          }
          
          Get-Content .custom_env
          Get-Content .custom_env | Out-File -Append $env:GITHUB_ENV
      - name: upload .custom_env
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: custom_env
          path: ./.custom_env
      - name: build
        shell: pwsh
        run: |
          ./build.sh
          Copy-Item $env:GITHUB_ENV build/output/
          Copy-Item .custom_env build/output/
          Set-Location build/output
          '${{ toJson(github) }}' | Out-File github
          '${{ env.RELEASE_BODY }}' | Out-File body
          '${{ env.FORCE }}' | Out-File force
      - name: zip
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: build/output
          filename: ${{ github.workspace }}/build/result.zip
          exclusions: '.*'
      - name: upload artifact result.zip
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/result.zip
      - name: upload artifact output folder
        uses: actions/upload-artifact@v4
        with:
          name: second
          path: build/output
      - name: Setup tmate session
        env:   
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_orphan: true
          publish_dir: build/output/
  release:
    needs: [build]
    name: make release
    runs-on: ubuntu-latest
    steps:
      - name: test env
        run: |
          echo $BUILD_NAME_WITH_VERSION
      - name: download custom env
        uses: actions/download-artifact@v4
        with:
          name: custom_env
      - name: apply custom env
        run: |
          cat .custom_env >> $GITHUB_ENV
          rm .custom_env
      - name: download build
        uses: actions/download-artifact@v4
        with:
          name: build
      - name: download second
        uses: actions/download-artifact@v4
        with:
          name: second
          path: second
      - run: find . > fileList.txt
      - name: create release
        if: ${{ env.CREATE_RELEASE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_VERSION }}
          release_name: ${{ env.BUILD_VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: true
          prerelease: ${{ env.PRE_RELEASE == 'true' }}
      - name: Upload Release Asset result.zip
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./result.zip
          asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset fileList.txt
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./fileList.txt
          asset_name: fileList.txt
          asset_content_type: text/plain
      - name: public release
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
      - name: Send commit to telegram
        if: ${{ env.SEND_TELEGRAM == 'true' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: ${{ env.UPDATE_BODY }}
          document: ./result.zip
