name: error_ignore
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/error_ignore.yml'
  workflow_dispatch:
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: prepare
          run: |
              echo datetime="$(date +'%Y%m%d%H%m%S')" >> $GITHUB_ENV
        - name: download latest release asset
          continue-on-error: true
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
              INPUT_FILE='test_error_ignore.txt'
              TARGET=$INPUT_FILE

              API_URL="https://$GITHUB_TOKEN:@api.github.com/repos/$GITHUB_REPOSITORY"
              # actions提供的token不能通过https://token:@api的方式使用，会not found,
              # 关键是自己申请的token就可以，
              # 这里用Authorization: token两种token都支持，
              RELEASE_DATA=$(curl -H "Authorization: token $GITHUB_TOKEN" "$API_URL/releases/latest")
              MESSAGE=$(echo $RELEASE_DATA | jq -r ".message")
              if [[ "$MESSAGE" == "Not Found" ]]; then
                  echo "Release not found $API_URL/releases/latest"
                  exit 1
              fi
              ASSET_ID=$(echo $RELEASE_DATA | jq -r ".assets | map(select(.name == \"${INPUT_FILE}\"))[0].id")
              if [[ -z "$ASSET_ID" ]]; then
                  echo "asset not found: $INPUT_FILE"
                  exit 2
              fi
              code=$(curl -L -w '%{http_code}' -o $TARGET -H "Authorization: token $GITHUB_TOKEN" -H 'User-Agent: request module' -H 'Accept: application/octet-stream' "$API_URL/releases/assets/$ASSET_ID")
              if test "x$code" != "x200"
              then
                  cat "$TARGET"
                  rm -rf "$TARGET"
                  exit 3
              fi
        - name: job
          run: |
              echo ${{ env.datetime }} >> test_error_ignore.txt
        - name: get release
          id: get_release
          continue-on-error: true
          uses: cardinalby/git-get-release-action@v1.1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            commitSha: ${{ github.sha }}
        - name: create release
          if: ${{ steps.get_release.outputs.id == '' }}
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ env.datetime }}
            release_name: ${{ env.datetime }}
            body: ${{ github.event.commits[0].message }}
            draft: true
            prerelease: false
        - name: make release id
          run: |
              if test -z "${{ steps.get_release.outputs.id }}"
              then
                  echo release_id="${{ steps.create_release.outputs.id }}" >> $GITHUB_ENV
                  echo release_upload_url="${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
              else
                  echo release_id="${{ steps.get_release.outputs.id }}" >> $GITHUB_ENV
                  echo release_upload_url="${{ steps.get_release.outputs.upload_url }}" >> $GITHUB_ENV
              fi
        - name: upload release
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ env.release_upload_url }}
            asset_path: test_error_ignore.txt
            asset_name: test_error_ignore.txt
            asset_content_type: text/plain
        - name: public release
          uses: eregon/publish-release@v1
          if: ${{ steps.get_release.outputs.id == '' }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            release_id: ${{ env.release_id }}
